grammar MyC;

prog
    :   one_desc prog
    |   // end prog
    ;

one_desc
    :   data
    |   classStr
    |   'void main() ' desc_fun
    |   constStr
    ;

classStr
    :   'class ' Ident ' {' desc_class '};'
    ;

desc_class
    :   data desc_class
    |   // empty
    ;

type
    :   'int '
    |   'char '
    |   Ident ' '
    ;

data
    :   type list ';'
    ;

list
    :   variable (',' variable)*
    ;

variable
    :   Ident size_array may_assign
    ;

size_array
    :   '[' array_size_num ']' size_array
    |   // empty
    ;

array_size_num
    : Ident
    | Decimal
    ;

may_assign
    :   '=' expression
    |   // empty
    ;

expression
    :   a1
    |   '{' many_expression '}'
    ;

many_expression
    :   expression (',' expression)*
    ;

constStr
    :   'const' type Ident '=' Decimal ';'
    ;

a1
    :   a2  ( '||' a2 | '&&' a2 | '==' a2)*
    ;

a2
    :   a3 ( '>' a3 | '>=' a3 | '<' a3 | '<=' a3)*
    ;

a3
    :   a4 ( '+' a4 | '-' a4)*
    ;

a4
    :   a5 ('*' a5 | '/' a5 | '%' a5)*
    ;

a5
    :   Ident
    |   Decimal
    |   id_intern_elem
    |   '(' a1 ')'
    ;

desc_fun
    :   '{' content_desc '}'
    ;

content_desc
    :   desc content_desc
    |   // empty
    ;

desc
    :   data
    |   constStr
    |   operator
    ;

operator
    :   desc_fun
    |   ifGrammar
    |   assign
    ;

assign
    :   id_intern_elem '=' expression ';'
    ;

id_intern_elem
    :   Ident elem_array ('.' Ident elem_array)*
    ;

elem_array
    :   id_intern_elem '[' expression ']'
    |   // empty
    ;

ifGrammar
    :   'if' '(' expression ')' operator may_else
    ;

may_else
    :   'else' operator
    |   // empty
    ;

Ident
    :   Nondigit
        (Nondigit | Digit)*
    ;

Decimal
    :   NonZeroDigit Digit*
    |   '0'
    ;

fragment
Nondigit
    :   [a-zA-Z_]
    ;

fragment
Digit
    :   [0-9]
    ;

fragment
NonZeroDigit
    :   [1-9]
    ;

fragment
EncodingPrefix
    :   'u8'
    |   'u'
    |   'U'
    |   'L'
    ;

fragment
SCharSequence
    :   SChar+
    ;
fragment
SChar
    :   ~["\\\r\n]
    |   EscapeSequence
    |   '\\\n'   // Added line
    |   '\\\r\n' // Added line
    ;

fragment
SimpleEscapeSequence
    :   '\\' ['"?abfnrtv\\]
    ;

fragment
EscapeSequence
    :   SimpleEscapeSequence
    ;


StringLiteral
    :   EncodingPrefix? '"' SCharSequence? '"'
    ;

// ignore the lines generated by c preprocessor
// sample line : '#line 1 "/home/dm/files/dk1.h" 1'
LineAfterPreprocessing
    :   '#line' Whitespace* ~[\r\n]*
        -> skip
    ;

LineDirective
    :   '#' Whitespace? Decimal Whitespace? StringLiteral ~[\r\n]*
        -> skip
    ;

PragmaDirective
    :   '#' Whitespace? 'pragma' Whitespace ~[\r\n]*
        -> skip
    ;

Whitespace
    :   [\t]+
        -> skip
    ;

Newline
    :   (   '\r' 'n' ?
        |   '\n'
        )
        -> skip
    ;

LineComment
    :   '//' ~[\r\n]*
        -> skip
    ;

BlockComment
    :   '/*' .*? '*/'
        -> skip
    ;